{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/teranov/Desktop/proyectos/repuestos/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport { StyleProvider } from \"native-base\";\nimport App from \"./src/App\";\n\nvar Autopartes = function (_Component) {\n  _inherits(Autopartes, _Component);\n\n  var _super = _createSuper(Autopartes);\n\n  function Autopartes(props) {\n    var _this;\n\n    _classCallCheck(this, Autopartes);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isReady: false\n    };\n    return _this;\n  }\n\n  _createClass(Autopartes, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread({\n                Roboto: require('native-base/Fonts/Roboto.ttf'),\n                Roboto_medium: require('native-base/Fonts/Roboto_medium.ttf')\n              }, Ionicons.font)));\n\n            case 2:\n              this.setState({\n                isReady: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.isReady) {\n        return React.createElement(AppLoading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 20\n          }\n        });\n      }\n\n      var res = React.createElement(App, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 20\n        }\n      });\n      return res;\n    }\n  }]);\n\n  return Autopartes;\n}(Component);\n\nexport default Autopartes;","map":{"version":3,"sources":["/Users/teranov/Desktop/proyectos/repuestos/App.js"],"names":["React","Component","AppLoading","Font","Ionicons","StyleProvider","App","Autopartes","props","state","isReady","loadAsync","Roboto","require","Roboto_medium","font","setState","res"],"mappings":";;;;;;;;;;;;;;;;;AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,aAAT,QAA8B,aAA9B;AAEA,OAAOC,GAAP;;IAEMC,U;;;;;AACF,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAFe;AAKlB;;;;;;;;;;+CAGSP,IAAI,CAACQ,SAAL;AACJC,gBAAAA,MAAM,EAAEC,OAAO,CAAC,8BAAD,CADX;AAEJC,gBAAAA,aAAa,EAAED,OAAO,CAAC,qCAAD;AAFlB,iBAGDT,QAAQ,CAACW,IAHR,E;;;AAKN,mBAAKC,QAAL,CAAc;AAAEN,gBAAAA,OAAO,EAAE;AAAX,eAAd;;;;;;;;;;;6BAGI;AACJ,UAAI,CAAC,KAAKD,KAAL,CAAWC,OAAhB,EAAyB;AACrB,eAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;AACD,UAAIO,GAAG,GAAI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAX;AACA,aAAOA,GAAP;AACH;;;;EAvBoBhB,S;;AA0BzB,eAAeM,UAAf","sourcesContent":["\nimport React, {Component} from 'react';\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport { StyleProvider } from \"native-base\";\n\nimport App from \"./src/App\";\n\nclass Autopartes extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n          isReady: false,\n        };\n    }\n    \n    async componentDidMount() {\n        await Font.loadAsync({\n          Roboto: require('native-base/Fonts/Roboto.ttf'),\n          Roboto_medium: require('native-base/Fonts/Roboto_medium.ttf'),\n          ...Ionicons.font,\n        });\n        this.setState({ isReady: true });\n      }\n\n    render(){\n        if (!this.state.isReady) {\n            return <AppLoading />;\n        }\n        let res =  <App />;\n        return(res);\n    }\n}\n\nexport default Autopartes"]},"metadata":{},"sourceType":"module"}